"""
Streamlit –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–Ω—Ç–≥–µ–Ω-—Å–Ω–∏–º–∫–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.
"""

import streamlit as st
import numpy as np
import pandas as pd
import cv2
from PIL import Image
import plotly.graph_objects as go
import pydicom

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from inference import (
    load_model,
    predict_pneumonia,
    generate_gradcam_visualization,
    create_diagnosis_report,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–Ω–µ–≤–º–æ–Ω–∏–∏",
    page_icon="ü´Å",
    layout="wide",
    initial_sidebar_state="expanded",
)


# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_cached_model():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏."""
    try:
        model = load_model("./model_weights.pth")
        return model, True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
        return None, False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
def create_result_html(probability, confidence, classification, risk_level):
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML –±–ª–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""

    # –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
    color_map = {
        "Very Low": "#28a745",  # –ó–µ–ª–µ–Ω—ã–π
        "Low": "#6fb83f",  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
        "Moderate": "#ffc107",  # –ñ–µ–ª—Ç—ã–π
        "High": "#fd7e14",  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        "Very High": "#dc3545",  # –ö—Ä–∞—Å–Ω—ã–π
    }

    risk_color = color_map.get(risk_level, "#6c757d")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    html = f"""
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        color: white;
        text-align: center;
        margin: 1rem 0;
    ">
        <h2 style="margin-bottom: 1rem; font-size: 1.8rem;">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏</h2>
        <div style="
            background: rgba(255,255,255,0.1);
            border-radius: 10px;
            padding: 1.5rem;
            margin: 1rem 0;
            backdrop-filter: blur(10px);
        ">
            <h3 style="margin-bottom: 0.5rem;">–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</h3>
            <p style="font-size: 1.5rem; font-weight: bold; margin: 0;">
                {classification}
            </p>
        </div>
        <div style="display: flex; justify-content: space-around; margin: 1rem 0;">
            <div style="text-align: center;">
                <h4>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–Ω–µ–≤–º–æ–Ω–∏–∏</h4>
                <p style="font-size: 2rem; font-weight: bold; color: #ffd700;">
                    {probability:.1%}
                </p>
            </div>
            <div style="text-align: center;">
                <h4>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏</h4>
                <p style="font-size: 2rem; font-weight: bold; color: #87ceeb;">
                    {confidence:.1%}
                </p>
            </div>
        </div>
        <div style="
            background: {risk_color};
            border-radius: 10px;
            padding: 1rem;
            margin-top: 1rem;
        ">
            <h4>–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_level}</h4>
        </div>
    </div>
    """

    return html


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Plotly –≥—Ä–∞—Ñ–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
def create_probability_gauge(probability):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–ª–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏."""

    fig = go.Figure(
        go.Indicator(
            mode="gauge+number+delta",
            value=probability * 100,
            domain={"x": [0, 1], "y": [0, 1]},
            title={"text": "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–Ω–µ–≤–º–æ–Ω–∏–∏ (%)"},
            delta={"reference": 50},
            gauge={
                "axis": {"range": [None, 100]},
                "bar": {"color": "darkblue"},
                "steps": [
                    {"range": [0, 25], "color": "lightgreen"},
                    {"range": [25, 50], "color": "yellow"},
                    {"range": [50, 75], "color": "orange"},
                    {"range": [75, 100], "color": "red"},
                ],
                "threshold": {
                    "line": {"color": "red", "width": 4},
                    "thickness": 0.75,
                    "value": 50,
                },
            },
        )
    )

    fig.update_layout(
        height=300, font=dict(size=16), margin=dict(l=20, r=20, t=60, b=20)
    )

    return fig


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown(
        """
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-size: 3rem;
            margin-bottom: 0.5rem;
        ">
            ü´Å –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–Ω–µ–≤–º–æ–Ω–∏–∏
        </h1>
        <p style="font-size: 1.2rem; color: #666; margin-bottom: 2rem;">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–≥–µ–Ω-—Å–Ω–∏–º–∫–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DenseNet-121
        </p>
    </div>
    """,
        unsafe_allow_html=True,
    )

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    with st.sidebar:
        st.markdown("## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

        model_info = {
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": "DenseNet-121",
            "–í—Ö–æ–¥–Ω–æ–π —Ä–∞–∑–º–µ—Ä": "224√ó224 –ø–∏–∫—Å–µ–ª–µ–π",
            "–¢–æ—á–Ω–æ—Å—Ç—å": ">93%",
            "AUC-ROC": ">0.96",
            "–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏": "~50ms",
        }

        for key, value in model_info.items():
            st.markdown(f"**{key}:** {value}")

        st.markdown("---")
        st.markdown("## ‚ö†Ô∏è –í–∞–∂–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è")
        st.markdown(
            """
        - –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ü–µ–ª–µ–π
        - –ù–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        - –¢—Ä–µ–±—É–µ—Ç —Ä–µ–Ω—Ç–≥–µ–Ω-—Å–Ω–∏–º–∫–æ–≤ —Ö–æ—Ä–æ—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        - –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏
        """
        )

        st.markdown("---")
        st.markdown("## üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã")
        st.markdown("- JPEG, PNG, DICOM")
        st.markdown("- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏..."):
        model, model_loaded = load_cached_model()

    if not model_loaded:
        st.error(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ model_weights.pth"
        )
        st.stop()

    st.success("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

    # –°–¢–†–û–ö–ê 1: –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    st.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    upload_col1, upload_col2 = st.columns([1, 1])

    uploaded_image = None

    with upload_col1:
        st.markdown("#### –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞")

        uploaded_file = st.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–Ω—Ç–≥–µ–Ω-—Å–Ω–∏–º–æ–∫",
            type=["jpg", "jpeg", "png", "dcm"],
            accept_multiple_files=False,
        )

        if uploaded_file is not None:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            if uploaded_file.size > 10 * 1024 * 1024:  # 10MB
                st.error(
                    "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10MB. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–Ω—å—à–∏–π —Ñ–∞–π–ª."
                )
                st.stop()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                if uploaded_file.type == "application/dicom":
                    dicom_data = pydicom.dcmread(uploaded_file)
                    image_array = dicom_data.pixel_array
                    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    image_array = (
                        (image_array - image_array.min())
                        / (image_array.max() - image_array.min())
                        * 255
                    ).astype(np.uint8)
                    uploaded_image = cv2.cvtColor(image_array, cv2.COLOR_GRAY2RGB)
                else:
                    # –û–±—ã—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    uploaded_image = np.array(Image.open(uploaded_file).convert("RGB"))

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                st.stop()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ)
        if uploaded_image is not None:
            st.markdown("#### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
            file_size_mb = uploaded_file.size / (1024 * 1024)
            st.markdown(f"**–ò–º—è —Ñ–∞–π–ª–∞:** {uploaded_file.name} ({file_size_mb:.2f} MB)")
            st.markdown(
                f"**–†–∞–∑–º–µ—Ä:** {uploaded_image.shape[0]}√ó{uploaded_image.shape[1]} –ø–∏–∫—Å–µ–ª–µ–π"
            )
            st.markdown(
                f"**–¢–∏–ø:** {'–¶–≤–µ—Ç–Ω–æ–µ' if len(uploaded_image.shape) == 3 else '–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ'}"
            )

    with upload_col2:
        if uploaded_image is not None:
            st.markdown("#### –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            st.image(
                uploaded_image,
                caption="–†–µ–Ω—Ç–≥–µ–Ω-—Å–Ω–∏–º–æ–∫ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏",
                use_container_width=True,
            )
        else:
            st.markdown("#### –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä")
            st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")

    # –°–¢–†–û–ö–ê 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    if uploaded_image is not None:
        st.markdown("---")
        st.markdown("### üî¨ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
        if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É", type="primary", use_container_width=True):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
                    probability, confidence = predict_pneumonia(
                        uploaded_image, model, return_confidence=True
                    )

                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    classification = (
                        "–ü–Ω–µ–≤–º–æ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞" if probability >= 0.5 else "–ù–æ—Ä–º–∞"
                    )

                    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
                    if probability >= 0.8:
                        risk_level = "Very High"
                    elif probability >= 0.6:
                        risk_level = "High"
                    elif probability >= 0.4:
                        risk_level = "Moderate"
                    elif probability >= 0.2:
                        risk_level = "Low"
                    else:
                        risk_level = "Very Low"

                    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                    report = create_diagnosis_report(uploaded_image, model)

                    # –†–∞–∑–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
                    result_col1, result_col2 = st.columns([1, 1])

                    with result_col1:
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        st.markdown(
                            create_result_html(
                                probability, confidence, classification, risk_level
                            ),
                            unsafe_allow_html=True,
                        )

                    with result_col2:
                        # –ö—Ä—É–≥–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                        st.plotly_chart(
                            create_probability_gauge(probability),
                            use_container_width=True,
                        )

                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                        st.markdown("#### –ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                        for i, recommendation in enumerate(
                            report["recommendations"], 1
                        ):
                            st.markdown(f"{i}. {recommendation}")

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    # –°–µ–∫—Ü–∏—è —Å Grad-CAM –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π
    if uploaded_image is not None:
        st.markdown("---")
        st.markdown("### üîç Grad-CAM –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")

        if st.button(
            "–°–æ–∑–¥–∞—Ç—å —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É", type="primary", use_container_width=True
        ):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Grad-CAM..."):
                try:
                    original, overlay, prob = generate_gradcam_visualization(
                        uploaded_image, model
                    )

                    col3, col4 = st.columns([1, 1])

                    with col3:
                        st.markdown("#### –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                        st.image(original, use_container_width=True)

                    with col4:
                        st.markdown("#### –û–±–ª–∞—Å—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏—è –º–æ–¥–µ–ª–∏")
                        st.image(overlay, use_container_width=True)
                        st.caption(
                            f"–ö—Ä–∞—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {prob:.3f})"
                        )

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Grad-CAM: {e}")

    # –°–µ–∫—Ü–∏—è —Å –ø–∞–∫–µ—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
    st.markdown("---")
    st.markdown("### üìä –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

    uploaded_files = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞",
        type=["jpg", "jpeg", "png", "dcm"],
        accept_multiple_files=True,
    )

    if uploaded_files:
        st.markdown(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(uploaded_files)}")

        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
            progress_bar = st.progress(0)
            results = []

            for i, file in enumerate(uploaded_files):
                try:
                    if file.type == "application/dicom":
                        dicom_data = pydicom.dcmread(file)
                        image_array = dicom_data.pixel_array
                        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                        image_array = (
                            (image_array - image_array.min())
                            / (image_array.max() - image_array.min())
                            * 255
                        ).astype(np.uint8)
                        image = cv2.cvtColor(image_array, cv2.COLOR_GRAY2RGB)
                    else:
                        # –û–±—ã—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        image = np.array(Image.open(file).convert("RGB"))

                    probability, confidence = predict_pneumonia(
                        image, model, return_confidence=True
                    )

                    results.append(
                        {
                            "–§–∞–π–ª": file.name,
                            "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–Ω–µ–≤–º–æ–Ω–∏–∏": f"{probability:.3f}",
                            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": f"{confidence:.3f}",
                            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è": (
                                "–ü–Ω–µ–≤–º–æ–Ω–∏—è" if probability >= 0.5 else "–ù–æ—Ä–º–∞"
                            ),
                        }
                    )

                    progress_bar.progress((i + 1) / len(uploaded_files))

                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file.name}: {e}")

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
            if results:
                df = pd.DataFrame(results)
                st.dataframe(df, use_container_width=True)

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                pneumonia_count = sum(
                    1 for r in results if r["–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"] == "–ü–Ω–µ–≤–º–æ–Ω–∏—è"
                )
                st.markdown(
                    f"**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:** {pneumonia_count} –∏–∑ {len(results)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–Ω–µ–≤–º–æ–Ω–∏—è"
                )

    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        """
    <div style="text-align: center; color: #666; padding: 1rem;">
        <p>üéì –í—ã–ø—É—Å–∫–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –ø–Ω–µ–≤–º–æ–Ω–∏–∏</p>
        <p>–ú–æ–¥–µ–ª—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ DenseNet-121 –∏ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –¥–∞—Ç–∞—Å–µ—Ç–µ RSNA Pneumonia Detection Challenge</p>
        <p><small>‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª–µ–π</small></p>
    </div>
    """,
        unsafe_allow_html=True,
    )


if __name__ == "__main__":
    main()
